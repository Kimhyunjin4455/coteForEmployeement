# O(ElogV) E는 간선의 갯수 V는 노드의 갯수
# 힙 구조 사용 (특정노드까지의 최단 거리에 대한 정보를 힙에 담아서 처리 => 출발 노드로부터 가장 거리가 짧은 노드를 더욱 빠르게 찾을 수 있음)
# 파이썬은 우선순위 큐가 필요할 때 PriorityQueue 혹은 heapq를 사용할 수 있는데, heapq가 더 빠르게 동작
# 대부분 우선순위 큐 라이브러리에 데이터의 묶음을 넣으면, 첫 번째 원소를 기준으로 우선순위 설정
# 우선순위 큐 구현할 때엔 내부적으로 최소 힙 or 최대 힙을 이용 (최소 힙 이용시 가장 낮은 데이터가 먼저 삭제)
# 파이썬 라이브러리는 기본적으로 최소 힙 구조 이용
# 다익스트라 알고리즘은 비용이 적은 노드를 우선하여 방문, 최소 힙에 적합
# 최소 힙을 최대 힙처럼 사용하기 위해 음수 부호를 붙여서 넣었다가 꺼낸 다음에 다시 음수 부호를 붙여 다시 원래의 값으로 돌리는 방식 사용 가능
# 힙을 이용하는 경우 모든 원소를 저장한 뒤에 우선순위에 맞게 빠르게 뽑아낼 수 있으므로 힙은 우선순위 큐 구현할 때에 가장 많이 사용됨

# 우선순위 큐를 이용해서 시작 노드로부터 거리가 짧은 노드 순서대로 큐에서 나올 수 있도록 다익스트라 알고리즘 작성
# 출발 노드 지정(ex 1번), 출발 노드를 제외한 모드 노드의 최단 거리를 무한으로 설정, 우선 순위 큐에 1번 노드 넣기
# 1번 노드로 가는 거리는 자기 자신까지 도달하는 거리 => 0
# 튜플 (0,1) (0은 거리 1은 노드 번호)을 우선순위 큐에 넣음, 파이썬의 힙 라이브러리는 원소로 튜플을 입력받으면 튜플의 첫 번째 원소를 기준으로 우선순위 큐를 구성
# 따라서 (거리, 노드번호) 순서대로 튜플 데이터를 구성해 우선순위 큐에 넣으면 거리순으로 정렬됨
# 기본적으로 거리가 짧은 원소가 우선순위 큐의 최상위 원소 => 해당 노드를 이미 처리한 적이 있다면 무시(아직 처리하지 않은 노드에 대해서 처리)
# 경로가 무한으로 설정돼있을 때 더 짧은 경로를 찾으면 갱신 => 더 짧은 경로를 찾은 노드 정보들은 다시 우선순위 큐에 넣음
# 이어서 다시 우선순위 큐에서 원소를 꺼내어 동일한 과정 반복(최단 거리가 가장 짧은 노드)
# 최단 거리가 가장 짧은 노드를 기준으로 연결된 간선 확인(1번 노드를 거쳤기에 기존의 비용에서 추가함)

# 최단 거리가 가장 짧은 노드를 선택하는 과정을 다익스트라 최단 경로 함수 안에서 우선순위 큐를 이용하는 방식으로 대체 가능
import heapq
import sys
input = sys.stdin.readline()
INF = int(1e9)

n,m = map(int, input.split()) # 노드의 개수, 간선의 개수 입력
start = int(input) # 시작 노드 번호 입력
graph = [[] for i in range(n+1)] # 각 노드에 연결되어 있는 노드에 대한 정보를 담는 리스트 만들기
distance = [INF] * (n+1) # 최단 거리 테이블을 모두 무한으로 초기

for _ in range(m): # a번 노드에서 b번 노드로 가는 비용이 c라는 의미
    a,b,c = map(int, input().split())
    graph[a].append((b,c))

def dijkstra(start):
    q = []
    heapq.heappush(q, (0, start)) # 시작 노드로 가기 위한 최단 경로는 0으로 설정하여 큐에 삽입
    distance[start] = 0
    while q:
        dist, now = heapq.heappop(q) # 가장 최단 거리가 짧은 노드에 대한 정보 꺼내기
        if distance[now] < dist: # 현재 노드가 이미 처리된 노드라면 무시
            continue
        for i in graph[now]: # 현재 노드와 연결된 다른 인접한 노드를 확인
            cost = dist + i[1] # 거리
            if cost < distance[i[0]]: # 현재 노드를 거쳐서, 다른 노드로 이동하는 거리가 더 짧은 경우
                distance[i[0]] = cost
                heapq.heappush(q,(cost, i[0]))

dijkstra(start)

for i in range(1, n+1): # 모든 노드로 가기 위한 최단 거리 출력
    if distance[i] == INF:
        print("INFINITY")
    else:
        print(distance[i])

# PriorityQueue 와 heapq는 데이터의 개수가 n개일 때, 하나의 데이터를 삽입 및 삭제할 때의 시간 복잡도 O(logN)
# 한번 처리된 노드는 더 이상 처리x, 큐에서 노드를 하나씩 꺼내 검사하는 반복문은 노드의 개수 v 이상의 횟수로 반복되지 않음
# v번 반복될 때마다 각각 자신과 연결된 간선 확인 (최대 간선의 개수 E만큼 연산 수행)
# E개의 간선 데이터를 힙에다 넣었다가 다시 빼는 것 O(ElogE)
# 중복 간선을 포함하지 않는 경우 E는 항상 v^2보다 작음 (모든 노드끼리 연결되어 있을 때 간선의 개수는 약 V^2)
# logE는 logV^2보다 작음, O(logV^2) => O(2logV) => O(logV)
# 따라서 시간복잡도 O(ElogV)




